'''
write a recursive function that check if a string is palindrome
palindrome is a word that read the same no matter from left to right or right to left
example:
kayak -> True
racecar -> True
civic -> True
'''
'''
kayak -> k + aya + k
aya -> a + y + a
y -> palindrome? yes

abba -> a + bb + a
bb -> b + b
'''
def check_panlindrome(str):
    if len(str) == 1:
        return True
    elif len(str) == 2:
        return str[0] == str[1]

    return str[0] == str[len(str) - 1] and check_panlindrome(str[1:len(str)-1])

str = 'kayak'
print(check_panlindrome(str))
'''
objects are generated by class, if you want to create objects
create the class first

class contains variables(static or non static variable) and methods(static method or non static method)
'''
class Person:
    # static variable directly in the class
    live = True
    # non-static variable needs to be defined in a special method called constructor
    # where constructor is just a special method in class
    def __init__(self, first_name, last_name):
        self.first_name = first_name
        self.last_name = last_name

    def full_name(self):
        return self.first_name + self.last_name


# to use static variable
print(Person.live)
# to use non-static variable, first need to create object
# when creating object, constructor gets called automatically, so need to pass enough inputs required by constructor
person1 = Person("Tom", "Lee")
print(person1.first_name)
print(person1.last_name)
print(person1.full_name())
print(Person.full_name(person1))

p2 = Person("A", "B")
print(p2.first_name)
print(p2.last_name)
print(type(p2))


'''
we use python built-in object very often, but we can write
own objects.
In order to create objects, need to write a class

class is the blueprint for the object. Object is the instance of the class
'''
x = 'abc'

'''
a class can have variables(static and non-static variable) 
and method(static and non-static method)
'''
class Person:
    # static variable
    live = True

    # non-static variable in __init__, constructor, with self prefix
    # self doesn't have practical meaning, just represent __init__ is in the class
    def __init__(self, first_name, last_name):
        self.first_name = first_name
        self.last_name = last_name

# to use static variable, just use the class name
print(Person.live)
# to use non-static variable, need to create object, access non-static variable by object
# when creating object from class, __init__ automatically gets called
person1 = Person("Tom", "Lee")
print(person1.first_name)
print(person1.last_name)

# write a Car class with two non-static variables, brand and color
class Car:
    def __init__(self, brand, color):
        self.brand = brand
        self.color = color

    def print_info(self):
        print(self.brand, self.color)


car = Car("toyota", "black")
car.print_info()
print(type(car))
























